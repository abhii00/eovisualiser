{"version":3,"sources":["data.js","assets/textures/earth_2k.jpg","graphics.js","assets/datasets/test.txt","App.js","index.js"],"names":["DataSet","type","raw","scale_factor","scene","camera","renderer","this","raw_data","datapoints","sphere_geometry","THREE","sphere_material","processTLEData","renderECFDataPoints","split_data","split","date","Date","gmst","satellite","i","length","entry","record","posvel_eci","undefined","position","pos_ecf","pos_three","x","z","y","multiplyScalar","mesh","clone","copy","Math","abs","material","color","datapoint","ECFDataPoint","push","add","earthRotation","calculateEarthRotation","id","earthTilt","applyAxisAngle","PI","angle","axis","n","getTimezoneOffset","L","g","sin","createEnvironment","sun_light","set","space_material","side","space","scale","sun_material","sun","earth_material","map","loadTexture","earth_texture","metalness","roughness","earth","rotation","animate","requestAnimationFrame","render","image_object","load","App","starting_camera_pos","window","innerWidth","innerHeight","setSize","shadowMap","enabled","OrbitControls","domElement","update","setupScene","mount","appendChild","fetch","test_dataset","then","r","text","className","ref","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.380c0e29.chunk.js","sourcesContent":["import * as THREE from 'three';\r\nimport * as satellite from 'satellite.js';\r\n\r\n/**\r\n * A Dataset\r\n * @param type the type of data provided, currently supports: satellite-tle\r\n * @param raw the raw dataset\r\n * @param scale_factor the scaling factor for display\r\n */\r\nclass DataSet {\r\n    constructor(type, raw, scale_factor, scene, camera, renderer){\r\n        this.raw_data = raw;\r\n        this.scale_factor = scale_factor;\r\n        this.datapoints = [];\r\n\r\n        //three js environment\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.renderer = renderer;\r\n\r\n        //reusable geometry and material\r\n        this.sphere_geometry = new THREE.SphereBufferGeometry(0.01, 2, 2);\r\n        this.sphere_material = new THREE.MeshBasicMaterial();\r\n\r\n        //workflow\r\n        this.type = type;\r\n        switch(this.type){\r\n            case 'satellite-tle':\r\n                this.processTLEData();\r\n                this.renderECFDataPoints();\r\n            break;\r\n            default:\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes TLE data and creates ECF datapoints \r\n     */\r\n    processTLEData(){\r\n        var split_data = this.raw_data.split(/\\r?\\n/);\r\n        const date = new Date();\r\n        const gmst = satellite.gstime(date);\r\n\r\n        for (var i = 0; i < (split_data.length-1)/3; i++){\r\n            var entry = 3*i;\r\n\r\n            var record = satellite.twoline2satrec(split_data[entry+1], split_data[entry+2])\r\n            var posvel_eci = satellite.propagate(record, date);\r\n            if (posvel_eci.position !== undefined){\r\n                var pos_ecf = satellite.eciToEcf(posvel_eci.position, gmst);\r\n\r\n                var pos_three = new THREE.Vector3(pos_ecf.x, pos_ecf.z, pos_ecf.y); //need to swap y and z axis i.e. x-z plane is plane of earth\r\n                pos_three.multiplyScalar(this.scale_factor);\r\n\r\n                const mesh = new THREE.Mesh(this.sphere_geometry, this.sphere_material.clone());\r\n                mesh.position.copy(pos_three);\r\n                \r\n                if (Math.abs(mesh.position.z) < 0.05) {mesh.material.color = new THREE.Color(0xff0000)} //color those that lie on prime meridian\r\n                else if (Math.abs(mesh.position.y) < 0.05) {mesh.material.color = new THREE.Color(0x00ff00)} //color those that lie in celestial plane\r\n                else {mesh.material.color = new THREE.Color(0xffffff)}\r\n\r\n                var datapoint = new ECFDataPoint(split_data[entry], mesh);\r\n                this.datapoints.push(datapoint);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders a set of ECI data points for the dataset into the datasets scene\r\n     */\r\n    renderECFDataPoints(){\r\n        for (var datapoint of this.datapoints){\r\n            this.scene.add(datapoint.mesh);\r\n            datapoint.earthRotation(calculateEarthRotation());\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * An individual ECF datapoint\r\n * @param id a unique id for the point\r\n * @param mesh the object for the point\r\n */\r\nclass ECFDataPoint{\r\n    constructor(id, mesh){\r\n        this.id = id;\r\n        this.mesh = mesh;\r\n\r\n        this.earthTilt();\r\n    }\r\n\r\n    /**\r\n     * Rotates to correct for earth tilt\r\n     */\r\n    earthTilt(){\r\n        this.mesh.position.applyAxisAngle(new THREE.Vector3(0,0,1), 23.5*Math.PI/180);\r\n    }\r\n\r\n    /**\r\n     * Rotates to correct for earth rotation\r\n     * @param angle the angle around the axis of rotation to rotate in radians\r\n     */\r\n    earthRotation(angle){\r\n        const axis = new THREE.Vector3(0,1,0).applyAxisAngle(new THREE.Vector3(0,0,1), 23.5*Math.PI/180);\r\n        this.mesh.position.applyAxisAngle(axis, angle);\r\n    }\r\n}\r\n\r\n/**\r\n * Finds the longitude of the sun i.e. the angle of rotation of the Earth\r\n * @returns the longitude of the sun in radians\r\n */\r\nfunction calculateEarthRotation(){\r\n    var date = new Date();\r\n    var julian_date = (date / 86400000) - (date.getTimezoneOffset() / 1440) + 2440587.5;\r\n    var n = julian_date - 2451545.0;\r\n\r\n    var L = 280.460 + 0.9856474*n;\r\n    var g = 357.528 + 0.9856003*n;\r\n    L = (L % 360)*Math.PI/180;\r\n    g = (g % 360)*Math.PI/180;\r\n\r\n    var lambda = L + 1.915*Math.sin(g) + 0.020*Math.sin(2*g);\r\n    return lambda-Math.PI/2; //subtracting as tilt around axis perp. to 90 longitude\r\n}\r\n\r\nexport {\r\n    calculateEarthRotation,\r\n    DataSet\r\n}","export default __webpack_public_path__ + \"static/media/earth_2k.981cc3e3.jpg\";","import * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n\r\nimport { calculateEarthRotation } from './data';\r\n\r\nimport earth_texture from './assets/textures/earth_2k.jpg';\r\n\r\n/**\r\n * Sets up scene with camera, controls and renderer \r\n * @param starting_camera_pos the starting y position of the camera\r\n * @return an array containing the scene, camera, renderer in that order\r\n */\r\nfunction setupScene(starting_camera_pos){\r\n    //setup new scene\r\n    const scene = new THREE.Scene();\r\n    \r\n    //setup camera\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1);\r\n    camera.position.copy(starting_camera_pos)\r\n\r\n    //setup renderer\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n    //setup camera controls\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.update();\r\n\r\n    return [scene, camera, renderer]\r\n}\r\n\r\n/**\r\n * Creates the environment i.e. lighting, sun, earth etc.\r\n * @param scene the scene into which to render\r\n * @param camera the camera used for the scene\r\n * @param renderer the renderer for the scene\r\n */\r\nfunction createEnvironment(scene, camera, renderer){\r\n    /*\r\n    6378km (1 R_e) is mapped to 1 unit,\r\n    sun positioned 80 units away rather than approx 20,000\r\n    */\r\n\r\n    //lighting\r\n    const sun_light = new THREE.PointLight(0xffffff, 1);\r\n    sun_light.position.set(80,0,0);\r\n    scene.add(sun_light);\r\n\r\n    //reusable geometry\r\n    const sphere_geometry = new THREE.SphereBufferGeometry(1,60,60);\r\n    \r\n    //space sphere\r\n    const space_material = new THREE.MeshBasicMaterial({\r\n        color: 0x000000,\r\n        side: THREE.BackSide        \r\n    });\r\n    const space = new THREE.Mesh(sphere_geometry, space_material);\r\n    space.scale.set(100,100,100);\r\n    scene.add(space);\r\n\r\n    //sun\r\n    const sun_material = new THREE.MeshBasicMaterial();\r\n    const sun = new THREE.Mesh(sphere_geometry, sun_material);\r\n    sun.scale.set(2,2,2);\r\n    sun.position.set(80,0,0);\r\n    scene.add(sun);\r\n\r\n    //earth\r\n    const earth_tilt = 23.5; //degrees of earth tilt\r\n\r\n    const earth_material = new THREE.MeshStandardMaterial({\r\n        map: loadTexture(earth_texture),\r\n        metalness: 0.4,\r\n        roughness: 0.8\r\n    }); \r\n    const earth = new THREE.Mesh(sphere_geometry, earth_material);\r\n    earth.rotation.set(0,calculateEarthRotation(),earth_tilt*Math.PI/180,'ZYX'); //tilt about axis perp. to 90 longitude\r\n    scene.add(earth);  \r\n    \r\n    //animate\r\n    function animate(){\r\n        requestAnimationFrame(animate);\r\n\r\n        render();\r\n    }\r\n\r\n    //render\r\n    function render() {\r\n        renderer.render(scene, camera);\r\n    }\r\n\r\n    animate();\r\n}\r\n\r\n/**\r\n * Loads a texture given an imported image object\r\n * @param {Image} image_object the image object\r\n * @return a texture object\r\n */\r\nfunction loadTexture(image_object){\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const texture = textureLoader.load(image_object)\r\n\r\n    return texture\r\n}\r\n\r\nexport {\r\n    setupScene,\r\n    createEnvironment,\r\n    loadTexture\r\n}","export default __webpack_public_path__ + \"static/media/test.73eab6d5.txt\";","import React from 'react';\r\nimport * as THREE from 'three';\r\n\r\nimport { setupScene, createEnvironment } from './graphics.js';\r\nimport { DataSet } from './data.js';\r\n\r\nimport test_dataset from './assets/datasets/test.txt';\r\n\r\nclass App extends React.Component {\r\n    /* \r\n    TODO Add API request to portfolioserver\r\n    */\r\n\r\n    componentDidMount() {\r\n        const [scene, camera, renderer] = setupScene(new THREE.Vector3(0,0,3));\r\n        this.mount.appendChild(renderer.domElement);\r\n        createEnvironment(scene, camera, renderer);\r\n\r\n        var test;\r\n        fetch(test_dataset)\r\n        .then(r => r.text())\r\n        .then(text => test = new DataSet(\"satellite-tle\", text, 1/6378, scene, camera, renderer))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='app' ref={ref => (this.mount = ref)} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom';\r\n\r\nimport App from './App.js';\r\n\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}