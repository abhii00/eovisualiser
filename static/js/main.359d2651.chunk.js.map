{"version":3,"sources":["utils.js","assets/textures/earth_2k.jpg","graphics.js","data.js","assets/datasets/test.txt","App.js","index.js"],"names":["convertDate","type","date","Date","julian_date","getTimezoneOffset","satellite","calculateEarthTilt","j2000","Math","PI","calculateSunPositionCE","L","g","epsilon","lambda","sin","ra","atan2","cos","dec","asin","createEnvironment","scene","camera","renderer","sphere_geometry","THREE","space_material","color","side","space","scale","set","add","sun_offset","x","y","z","calculateSunPositionECI","sun_x","sun_y","sun_z","sun_light","position","sun_material","sun","points","push","line_geometry","setFromPoints","line_material","line","earth_material","map","loadTexture","earth_texture","metalness","roughness","earth","rotation","gmst","calculateEarthRotation","animate","requestAnimationFrame","render","image_object","load","DataSet","raw","scale_factor","this","raw_data","datapoints","sphere_material","createDataPointInteractions","raycaster","intersects","processTLEData","renderDataPoints","split_data","split","i","length","entry","record","posvel_eci","undefined","pos_eci","pos_three_eci","multiplyScalar","pos_ecf","pos_three_ecf","mesh","clone","copy","name","abs","material","datapoint","ECIDataPoint","e","intersect","mouse","clientX","window","innerWidth","clientY","innerHeight","updateMousePosition","setFromCamera","new_intersects","intersectObjects","children","new_intersect","object","document","body","style","cursor","addEventListener","highlightDataPoints","App","starting_camera_pos","setSize","shadowMap","enabled","OrbitControls","domElement","update","createScene","mount","appendChild","fetch","test_dataset","then","r","text","className","ref","React","Component","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.359d2651.chunk.js","sourcesContent":["import * as satellite from 'satellite.js';\r\n\r\n/**\r\n * Converts a given date into a certain format\r\n * @param type the date format to convert into, currently supports julian, j2000, gmst\r\n * @param date a date object, default is the current time and date\r\n * @returns the formatted date\r\n */\r\nfunction convertDate(type,date = new Date()){\r\n    var julian_date = (date / 86400000) - (date.getTimezoneOffset() / 1440) + 2440587.5;\r\n\r\n    switch(type){\r\n        case 'julian':\r\n            return julian_date\r\n        case 'j2000':\r\n            return julian_date - 2451545.0\r\n        case 'gmst':\r\n            return satellite.gstime(date);\r\n        default:\r\n            return date\r\n    }    \r\n}\r\n\r\n/**\r\n * Calculates the Earth axial tilt/obliquity for a given date\r\n * @param j2000 a j2000 date, default is the current date\r\n * @returns the axial tilt of the earth in radians\r\n */\r\nfunction calculateEarthTilt(j2000 = convertDate('j2000')){\r\n    return (23.439-0.0000004*j2000)*Math.PI/180;\r\n}\r\n\r\n/**\r\n * Calculates the right acension and declination of the Sun (Celestial Equatorial)\r\n * @param j2000 a j2000 date, default is the current date\r\n * @returns an array containing the right acension and declination of the Sun in radians\r\n */\r\nfunction calculateSunPositionCE(j2000 = convertDate('j2000')){\r\n    var L = 280.460 + 0.9856474*j2000;\r\n    var g = 357.528 + 0.9856003*j2000;\r\n    var epsilon = calculateEarthTilt(j2000);\r\n\r\n    g = (g % 360)*Math.PI/180;\r\n\r\n    var lambda = L + 1.915*Math.sin(g) + 0.020*Math.sin(2*g);\r\n    lambda = lambda*Math.PI/180;\r\n\r\n    var ra = Math.atan2(Math.cos(epsilon)*Math.sin(lambda), Math.cos(lambda));\r\n    var dec = Math.asin(Math.sin(epsilon)*Math.sin(lambda));\r\n\r\n    return [ra, dec]; \r\n}\r\n\r\n/**\r\n * Calculates the x,y,z coordinates of the Sun (ECI)\r\n * @param j2000 a j2000 date, default is the current date\r\n * @returns an array containing the x,y,z coordinates of the sun\r\n */\r\nfunction calculateSunPositionECI(j2000 = convertDate('j2000')){\r\n    var [ra, dec] = calculateSunPositionCE(j2000);\r\n\r\n    var x = Math.cos(dec)*Math.cos(ra);\r\n    var y = Math.cos(dec)*Math.sin(ra);\r\n    var z = Math.sin(dec);\r\n\r\n    return [x,y,z]\r\n}\r\n\r\n/**\r\n * Calculates a rotation of the Earth about its axis to match the Greenwich meridian to the vernal equinox\r\n * @param gmst a gmst date, default is the current date\r\n * @returns the rotation of the earth about its axis in radians\r\n */\r\nfunction calculateEarthRotation(gmst = convertDate('gmst')){\r\n    var toggle;\r\n    if (gmst > Math.PI){ toggle = 1 }\r\n    else { toggle = -1 }\r\n    return -gmst+toggle*Math.PI/2;\r\n}\r\n\r\nexport {\r\n    convertDate,\r\n    calculateEarthTilt,\r\n    calculateEarthRotation,\r\n    calculateSunPositionCE,\r\n    calculateSunPositionECI,\r\n}","export default __webpack_public_path__ + \"static/media/earth_2k.981cc3e3.jpg\";","import * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n\r\nimport { calculateEarthRotation, calculateSunPositionECI } from './utils';\r\n\r\nimport earth_texture from './assets/textures/earth_2k.jpg';\r\n\r\n/**\r\n * Creates scene with camera, controls and renderer \r\n * @param starting_camera_pos the starting y position of the camera\r\n * @return an array containing the scene, camera, renderer in that order\r\n */\r\nfunction createScene(starting_camera_pos){\r\n    //create new scene\r\n    const scene = new THREE.Scene();\r\n    \r\n    //create camera\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1);\r\n    camera.position.copy(starting_camera_pos)\r\n\r\n    //create renderer\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n    //create camera controls\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.update();\r\n\r\n    return [scene, camera, renderer]\r\n}\r\n\r\n/**\r\n * Updates the position of the mouse on an event\r\n * @param e the event on which to update the mouse position\r\n * @returns a THREE Vector2 object containing the x and y position of the mouse\r\n */\r\nfunction updateMousePosition(e){\r\n    const mouse = new THREE.Vector2();\r\n    mouse.x = (e.clientX / window.innerWidth)*2 - 1;\r\n    mouse.y = -(e.clientY / window.innerHeight)*2 + 1;\r\n    return mouse;\r\n}\r\n\r\n/**\r\n * Creates the environment i.e. lighting, sun, earth etc.\r\n * @param scene the scene into which to render\r\n * @param camera the camera used for the scene\r\n * @param renderer the renderer for the scene\r\n */\r\nfunction createEnvironment(scene, camera, renderer){\r\n    /*\r\n    6378km (1 R_e) is mapped to 1 unit,\r\n    sun positioned 80 units away rather than approx 20,000,\r\n    everything is in ECI (sun, space objects) and earth is rotated to match this\r\n    */\r\n\r\n    //reusable geometry\r\n    const sphere_geometry = new THREE.SphereBufferGeometry(1,60,60);\r\n    \r\n    //space sphere\r\n    const space_material = new THREE.MeshBasicMaterial({\r\n        color: 0x000000,\r\n        side: THREE.BackSide        \r\n    });\r\n    const space = new THREE.Mesh(sphere_geometry, space_material);\r\n    space.scale.set(100,100,100);\r\n    scene.add(space);\r\n\r\n    //sun\r\n    const sun_offset = 80;\r\n    const [sun_x, sun_y, sun_z] = calculateSunPositionECI();\r\n\r\n    const sun_light = new THREE.PointLight(0xffffff, 1);\r\n    sun_light.position.set(sun_offset*sun_x,sun_offset*sun_z,sun_offset*sun_y);\r\n    scene.add(sun_light);\r\n\r\n    const sun_material = new THREE.MeshBasicMaterial();\r\n    const sun = new THREE.Mesh(sphere_geometry, sun_material);\r\n    sun.scale.set(2,2,2);\r\n    sun.position.set(sun_offset*sun_x,sun_offset*sun_z,sun_offset*sun_y);\r\n    scene.add(sun);\r\n\r\n    //line connecting earth and sun\r\n    var points = [];\r\n    points.push(new THREE.Vector3(0,0,0));\r\n    points.push(sun.position);\r\n    const line_geometry = new THREE.BufferGeometry().setFromPoints(points);\r\n    const line_material = new THREE.LineBasicMaterial();\r\n    const line = new THREE.Line(line_geometry,line_material);\r\n    scene.add(line);\r\n\r\n    //earth\r\n    const earth_material = new THREE.MeshStandardMaterial({\r\n        map: loadTexture(earth_texture),\r\n        metalness: 0.4,\r\n        roughness: 0.8\r\n    }); \r\n    const earth = new THREE.Mesh(sphere_geometry, earth_material);\r\n    earth.rotation.set(0,calculateEarthRotation(),0);\r\n    scene.add(earth);  \r\n    \r\n    //animate\r\n    function animate(){\r\n        requestAnimationFrame(animate);\r\n\r\n        render();\r\n    }\r\n\r\n    //render\r\n    function render() {\r\n        renderer.render(scene, camera);\r\n    }\r\n\r\n    animate();\r\n}\r\n\r\n/**\r\n * Loads a texture given an imported image object\r\n * @param {Image} image_object the image object\r\n * @return a texture object\r\n */\r\nfunction loadTexture(image_object){\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const texture = textureLoader.load(image_object)\r\n\r\n    return texture\r\n}\r\n\r\nexport {\r\n    createScene,\r\n    createEnvironment,\r\n    updateMousePosition,\r\n    loadTexture\r\n}","import * as THREE from 'three';\r\nimport * as satellite from 'satellite.js';\r\n\r\nimport { updateMousePosition } from './graphics';\r\nimport { convertDate } from './utils';\r\n\r\n/**\r\n * A Dataset\r\n * @param type the type of data provided, currently supports: satellite-tle\r\n * @param raw the raw dataset\r\n * @param scale_factor the scaling factor for display\r\n */\r\nclass DataSet {\r\n    constructor(type, raw, scale_factor, scene, camera, renderer){\r\n        this.raw_data = raw;\r\n        this.scale_factor = scale_factor;\r\n        this.datapoints = {};\r\n\r\n        //three js environment\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.renderer = renderer;\r\n\r\n        //reusable geometry and material\r\n        this.sphere_geometry = new THREE.SphereBufferGeometry(0.01, 2, 2);\r\n        this.sphere_material = new THREE.MeshBasicMaterial();\r\n\r\n        //intersections and interactions\r\n        this.createDataPointInteractions(this.scene, this.camera, this.renderer);\r\n        this.raycaster = new THREE.Raycaster();\r\n        this.intersects = [];\r\n\r\n        //workflow\r\n        this.type = type;\r\n        switch(this.type){\r\n            case 'satellite-tle':\r\n                this.processTLEData();\r\n            break;\r\n            default:\r\n            break;\r\n        }\r\n        this.renderDataPoints();\r\n    }\r\n\r\n    /**\r\n     * Processes TLE data and creates ECF datapoints \r\n     */\r\n    processTLEData(){\r\n        var split_data = this.raw_data.split(/\\r?\\n/);\r\n        const date = new Date();\r\n\r\n        for (var i = 0; i < (split_data.length-1)/3; i++){\r\n            var entry = 3*i;\r\n\r\n            var record = satellite.twoline2satrec(split_data[entry+1], split_data[entry+2])\r\n            var posvel_eci = satellite.propagate(record, date);\r\n            if (posvel_eci.position !== undefined){\r\n                //calculate eci position\r\n                var pos_eci = posvel_eci.position;\r\n                var pos_three_eci = new THREE.Vector3(pos_eci.x, pos_eci.z, pos_eci.y); //need to swap y and z axis i.e. x-z plane is plane of earth\r\n                pos_three_eci.multiplyScalar(this.scale_factor);\r\n\r\n                //calculate ecf position\r\n                var pos_ecf = satellite.eciToEcf(pos_eci, convertDate('gmst'));\r\n                var pos_three_ecf = new THREE.Vector3(pos_ecf.x, pos_ecf.z, pos_ecf.y);\r\n                pos_three_ecf.multiplyScalar(this.scale_factor);\r\n\r\n                //create mesh and name\r\n                const mesh = new THREE.Mesh(this.sphere_geometry, this.sphere_material.clone());\r\n                mesh.position.copy(pos_three_eci);\r\n                mesh.name = split_data[entry];\r\n                \r\n                //color mesh\r\n                if (Math.abs(pos_three_ecf.x) < 0.05) {mesh.material.color = new THREE.Color(0xff0000)} //color those that lie on prime meridian\r\n                else if (Math.abs(pos_three_ecf.y) < 0.05) {mesh.material.color = new THREE.Color(0x00ff00)} //color those that lie in celestial plane\r\n                else {mesh.material.color = new THREE.Color(0xffffff)}\r\n\r\n                var datapoint = new ECIDataPoint(mesh);\r\n                this.datapoints[split_data[entry]] =  datapoint;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders a set of data points for the dataset into the datasets scene\r\n     */\r\n    renderDataPoints(){\r\n        for (var datapoint in this.datapoints){\r\n            this.scene.add(this.datapoints[datapoint].mesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Highlights a datapoint object on hover\r\n     * @param e the event on which to trigger\r\n     * @param scene the scene into which to render\r\n     * @param camera the camera used for the scene\r\n     * @param renderer the renderer for the scene\r\n     */\r\n    highlightDataPoints(e, scene, camera, renderer){\r\n        //undo previous hover\r\n        var datapoint;\r\n        for (var intersect of this.intersects){\r\n            datapoint = this.datapoints[intersect];\r\n            datapoint.mesh.material.color.set(0xffffff);\r\n        }\r\n        this.intersects = [];\r\n        \r\n        //get mouse position and raycaster intersects\r\n        const mouse = updateMousePosition(e);\r\n        this.raycaster.setFromCamera(mouse, camera);\r\n        const new_intersects = this.raycaster.intersectObjects(scene.children);\r\n\r\n        //do new hover\r\n        for (var new_intersect of new_intersects) {\r\n            if (new_intersect.object.name !== ''){\r\n                datapoint = this.datapoints[new_intersect.object.name];\r\n                datapoint.mesh.material.color.set(0xff0000);\r\n\r\n                this.intersects.push(new_intersect.object.name);\r\n            }\r\n        }\r\n\r\n        //change to pointer\r\n        if (this.intersects.length > 0) { \r\n            document.body.style.cursor = 'pointer';\r\n         } \r\n        else { \r\n            document.body.style.cursor = 'default' ;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates all the user interactions for the dataset into the scene\r\n     * @param scene the scene into which to render\r\n     * @param camera the camera used for the scene\r\n     * @param renderer the renderer for the scene \r\n     */\r\n    createDataPointInteractions(scene, camera, renderer){\r\n        var highlight = (e) => this.highlightDataPoints(e, scene, camera, renderer);\r\n\r\n        window.addEventListener('mousemove',highlight,false); \r\n    }\r\n}\r\n\r\n/**\r\n * An individual ECF datapoint\r\n * @param mesh the object for the point\r\n */\r\nclass ECIDataPoint{\r\n    constructor(mesh){\r\n        this.mesh = mesh;\r\n    }\r\n}\r\n\r\nexport {\r\n    DataSet,\r\n    ECIDataPoint\r\n}","export default __webpack_public_path__ + \"static/media/test.73eab6d5.txt\";","import React from 'react';\r\nimport * as THREE from 'three';\r\n\r\nimport { createScene, createEnvironment } from './graphics';\r\nimport { DataSet } from './data';\r\n\r\nimport test_dataset from './assets/datasets/test.txt';\r\n\r\nclass App extends React.Component {\r\n    /* \r\n    FIXME Day-night cycle of Earth\r\n    TODO Add API request to portfolioserver\r\n    TODO Add clickable elements\r\n    TODO Add orbit visualisation\r\n    */\r\n\r\n    componentDidMount() {\r\n        const [scene, camera, renderer] = createScene(new THREE.Vector3(0,0,3));\r\n        this.mount.appendChild(renderer.domElement);\r\n        createEnvironment(scene, camera, renderer);\r\n        \r\n        /* eslint-disable no-unused-vars */\r\n        var test;\r\n        fetch(test_dataset)\r\n        .then(r => r.text())\r\n        .then(text => test = new DataSet(\"satellite-tle\", text, 1/6378, scene, camera, renderer))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='app' ref={ref => (this.mount = ref)} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom';\r\n\r\nimport App from './App.js';\r\n\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}