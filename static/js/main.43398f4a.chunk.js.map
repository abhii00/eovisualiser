{"version":3,"sources":["utils.js","assets/textures/earth_2k.jpg","graphics.js","data.js","assets/datasets/test.txt","App.js","index.js"],"names":["convertDate","type","date","Date","julian_date","getTimezoneOffset","satellite","calculateEarthTilt","j2000","Math","PI","calculateSunPositionCE","L","g","epsilon","lambda","sin","ra","atan2","cos","dec","asin","calculateSunPositionECI","rot","THREE","xyz","applyEuler","calculateEarthRotation","gmst","createEnvironment","scene","camera","renderer","sphere_geometry","space_material","color","side","space","scale","set","add","sun_pos","multiplyScalar","sun_light","position","copy","sun_material","sun","earth_material","map","loadTexture","earth_texture","metalness","roughness","earth","rotation","animate","requestAnimationFrame","render","image_object","load","DataSet","raw","scale_factor","this","raw_data","datapoints","sphere_material","line_material","intersects","raycaster","createDataPointInteractions","processTLEData","renderDataPoints","split_data","split","M","mu","i","length","entry","record","posvel_eci","undefined","pos_eci","vel_eci","velocity","vel_three_eci","x","z","y","pos_three_eci","pos_ecf","mesh_point","clone","name","points","a","cbrt","no","b","sqrt","ecco","c","j","ecc_anom","point","push","orbit_geometry","setFromPoints","mesh_orbit","rotateOnAxis","nodeo","inclo","argpo","translateOnAxis","Vector3","datapoint","ECIDataPoint","mesh","e","setFromCamera","mouse","clientX","window","innerWidth","clientY","innerHeight","updateMousePosition","intersectObjects","children","intersect","toggleHovered","clicked","remove","mesh2","new_intersects","updateIntersects","new_intersect","object","new_datapoint","document","body","style","cursor","toggleClicked","addEventListener","hoverDataPoints","clickDataPoints","hovered","material","App","starting_camera_pos","setSize","shadowMap","enabled","OrbitControls","domElement","update","createScene","mount","appendChild","fetch","test_dataset","then","r","text","className","ref","React","Component","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.43398f4a.chunk.js","sourcesContent":["import * as THREE from 'three';\r\nimport * as satellite from 'satellite.js';\r\n\r\n/**\r\n * Converts a given date into a certain format\r\n * @param type the date format to convert into, currently supports julian, j2000, gmst\r\n * @param date a date object, default is the current time and date\r\n * @returns the formatted date\r\n */\r\nfunction convertDate(type,date = new Date()){\r\n    var julian_date = (date / 86400000) - (date.getTimezoneOffset() / 1440) + 2440587.5;\r\n\r\n    switch(type){\r\n        case 'julian':\r\n            return julian_date\r\n        case 'j2000':\r\n            return julian_date - 2451545.0\r\n        case 'gmst':\r\n            return satellite.gstime(date);\r\n        default:\r\n            return date\r\n    }    \r\n}\r\n\r\n/**\r\n * Calculates the Earth axial tilt/obliquity for a given date\r\n * @param j2000 a j2000 date, default is the current date\r\n * @returns the axial tilt of the earth in radians\r\n */\r\nfunction calculateEarthTilt(j2000 = convertDate('j2000')){\r\n    return (23.439-0.0000004*j2000)*Math.PI/180;\r\n}\r\n\r\n/**\r\n * Calculates the right acension and declination of the Sun (Celestial Equatorial)\r\n * @param j2000 a j2000 date, default is the current date\r\n * @returns an array containing the right acension and declination of the Sun in radians\r\n */\r\nfunction calculateSunPositionCE(j2000 = convertDate('j2000')){\r\n    var L = 280.460 + 0.9856474*j2000;\r\n    var g = 357.528 + 0.9856003*j2000;\r\n    var epsilon = calculateEarthTilt(j2000);\r\n\r\n    g = (g % 360)*Math.PI/180;\r\n\r\n    var lambda = L + 1.915*Math.sin(g) + 0.020*Math.sin(2*g);\r\n    lambda = lambda*Math.PI/180;\r\n\r\n    var ra = Math.atan2(Math.cos(epsilon)*Math.sin(lambda), Math.cos(lambda));\r\n    var dec = Math.asin(Math.sin(epsilon)*Math.sin(lambda));\r\n\r\n    return [ra, dec]; \r\n}\r\n\r\n/**\r\n * Calculates the x,y,z coordinates of the Sun (ECI)\r\n * @param j2000 a j2000 date, default is the current date\r\n * @returns a THREE.Vector3 of the position of the sun\r\n */\r\nfunction calculateSunPositionECI(j2000 = convertDate('j2000')){\r\n    var [ra, dec] = calculateSunPositionCE(j2000);\r\n    const rot = new THREE.Euler(0,ra,dec,'XYZ');\r\n\r\n    var xyz = new THREE.Vector3(1,0,0);\r\n    xyz.applyEuler(rot);\r\n\r\n    return xyz\r\n}\r\n\r\n/**\r\n * Calculates a rotation of the Earth about its axis to match the Greenwich meridian to the vernal equinox\r\n * @param gmst a gmst date, default is the current date\r\n * @returns the rotation of the earth about its axis in radians\r\n */\r\nfunction calculateEarthRotation(gmst = convertDate('gmst')){\r\n    return gmst\r\n}\r\n\r\nexport {\r\n    convertDate,\r\n    calculateEarthTilt,\r\n    calculateEarthRotation,\r\n    calculateSunPositionCE,\r\n    calculateSunPositionECI,\r\n}","export default __webpack_public_path__ + \"static/media/earth_2k.981cc3e3.jpg\";","import * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n\r\nimport { calculateEarthRotation, calculateSunPositionECI } from './utils';\r\n\r\nimport earth_texture from './assets/textures/earth_2k.jpg';\r\n\r\n/**\r\n * Creates scene with camera, controls and renderer \r\n * @param starting_camera_pos the starting y position of the camera\r\n * @return an array containing the scene, camera, renderer in that order\r\n */\r\nfunction createScene(starting_camera_pos){\r\n    //create new scene\r\n    const scene = new THREE.Scene();\r\n    \r\n    //create camera\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1);\r\n    camera.position.copy(starting_camera_pos)\r\n\r\n    //create renderer\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n    //create camera controls\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.update();\r\n\r\n    return [scene, camera, renderer]\r\n}\r\n\r\n/**\r\n * Creates the environment i.e. lighting, sun, earth etc.\r\n * @param scene the scene into which to render\r\n * @param camera the camera used for the scene\r\n * @param renderer the renderer for the scene\r\n */\r\nfunction createEnvironment(scene, camera, renderer){\r\n    /*\r\n    6378km (1 R_e) is mapped to 1 unit,\r\n    sun positioned 80 units away rather than approx 20,000,\r\n    everything is in ECI (sun, space objects) and earth is rotated to match this\r\n    x,y,z in actual coords is mapped to x,z,-y i.e. y up instead of z up so x-z plane is equatorial plane\r\n    */\r\n\r\n    //reusable geometry\r\n    const sphere_geometry = new THREE.SphereBufferGeometry(1,60,60);\r\n    \r\n    //space sphere\r\n    const space_material = new THREE.MeshBasicMaterial({\r\n        color: 0x000000,\r\n        side: THREE.BackSide        \r\n    });\r\n    const space = new THREE.Mesh(sphere_geometry, space_material);\r\n    space.scale.set(100,100,100);\r\n    scene.add(space);\r\n\r\n    //sun\r\n    const sun_offset = 80;\r\n    const sun_pos = calculateSunPositionECI();\r\n    sun_pos.multiplyScalar(sun_offset);\r\n\r\n    const sun_light = new THREE.PointLight(0xffffff, 1);\r\n    sun_light.position.copy(sun_pos);\r\n    scene.add(sun_light);\r\n\r\n    const sun_material = new THREE.MeshBasicMaterial();\r\n    const sun = new THREE.Mesh(sphere_geometry, sun_material);\r\n    sun.scale.set(2,2,2);\r\n    sun.position.copy(sun_pos);\r\n    scene.add(sun);\r\n\r\n    //earth\r\n    const earth_material = new THREE.MeshStandardMaterial({\r\n        map: loadTexture(earth_texture),\r\n        metalness: 0.4,\r\n        roughness: 0.8\r\n    }); \r\n    const earth = new THREE.Mesh(sphere_geometry, earth_material);\r\n    earth.rotation.set(0,calculateEarthRotation(),0);\r\n    scene.add(earth);  \r\n    \r\n    //animate\r\n    function animate(){\r\n        requestAnimationFrame(animate);\r\n\r\n        render();\r\n    }\r\n\r\n    //render\r\n    function render() {\r\n        renderer.render(scene, camera);\r\n    }\r\n\r\n    animate();\r\n}\r\n\r\n/**\r\n * Creates the debug overlay i.e. axes\r\n * @param scene the scene into which to render\r\n * @param camera the camera used for the scene\r\n * @param renderer the renderer for the scene\r\n */\r\nfunction createDebugOverlay(scene, camera, renderer){\r\n    const origin = new THREE.Vector3(0,0,0);\r\n\r\n    //line connecting earth and sun\r\n    const sun_offset = 80;\r\n    const sun = calculateSunPositionECI();\r\n    sun.multiplyScalar(sun_offset);\r\n    const earth_sun_line = createLine(origin, sun, 0xffffff);\r\n    scene.add(earth_sun_line);\r\n\r\n    //ECI axes\r\n    const vernal_equinox = createLine(origin, new THREE.Vector3(2,0,0), 0x00ff00); //green is vernal equinox\r\n    const perp_equinox = createLine(origin, new THREE.Vector3(0,0,-2), 0x005000); //dark green is perpendicular\r\n    scene.add(vernal_equinox);\r\n    scene.add(perp_equinox);\r\n\r\n    //ECF\r\n    const prime_meridian = createLine(origin, new THREE.Vector3(2,0,0), 0xff0000); //red is prime meridian\r\n    const perp_meridian = createLine(origin, new THREE.Vector3(0,0,-2), 0x500000); //dark red is perpendicular\r\n    prime_meridian.rotation.set(0,calculateEarthRotation(),0);\r\n    perp_meridian.rotation.set(0,calculateEarthRotation(),0);\r\n    scene.add(prime_meridian);\r\n    scene.add(perp_meridian);\r\n}\r\n\r\n/**\r\n * Creates a line between two points\r\n * @param p1 the start point\r\n * @param p2 the end point\r\n * @param color the line color\r\n * @returns a THREE.line object connecting the two points\r\n */\r\nfunction createLine(p1, p2, color){\r\n    return new THREE.Line(new THREE.BufferGeometry().setFromPoints([p1, p2]), new THREE.LineBasicMaterial({color: color}))\r\n}\r\n\r\n/**\r\n * Updates the position of the mouse on an event\r\n * @param e the event on which to update the mouse position\r\n * @returns a THREE Vector2 object containing the x and y position of the mouse\r\n */\r\n function updateMousePosition(e){\r\n    const mouse = new THREE.Vector2();\r\n    mouse.x = (e.clientX / window.innerWidth)*2 - 1;\r\n    mouse.y = -(e.clientY / window.innerHeight)*2 + 1;\r\n    return mouse;\r\n}\r\n\r\n/**\r\n * Loads a texture given an imported image object\r\n * @param {Image} image_object the image object\r\n * @return a texture object\r\n */\r\nfunction loadTexture(image_object){\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const texture = textureLoader.load(image_object)\r\n\r\n    return texture\r\n}\r\n\r\nexport {\r\n    createScene,\r\n    createEnvironment,\r\n    createDebugOverlay,\r\n    updateMousePosition,\r\n    createLine,\r\n    loadTexture\r\n}","import * as THREE from 'three';\r\nimport * as satellite from 'satellite.js';\r\n\r\nimport { updateMousePosition } from './graphics';\r\nimport { convertDate } from './utils';\r\nimport { Vector3 } from 'three';\r\n/**\r\n * A Dataset\r\n * @param type the type of data provided, currently supports: satellite-tle\r\n * @param raw the raw dataset\r\n * @param scale_factor the scaling factor for display\r\n */\r\nclass DataSet {\r\n    constructor(type, raw, scale_factor, scene, camera, renderer){\r\n        this.raw_data = raw;\r\n        this.scale_factor = scale_factor;\r\n        this.datapoints = {};\r\n\r\n        //three js environment\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.renderer = renderer;\r\n\r\n        //reusable geometry and material\r\n        this.sphere_geometry = new THREE.SphereBufferGeometry(0.01, 3, 3);\r\n        this.sphere_material = new THREE.MeshBasicMaterial();\r\n        this.line_material = new THREE.LineBasicMaterial();\r\n\r\n        //intersections and interactions\r\n        this.intersects = [];\r\n        this.raycaster = new THREE.Raycaster();\r\n        this.createDataPointInteractions();\r\n\r\n        //workflow\r\n        this.type = type;\r\n        switch(this.type){\r\n            case 'satellite-tle':\r\n                this.processTLEData();\r\n            break;\r\n            default:\r\n            break;\r\n        }\r\n        this.renderDataPoints();\r\n    }\r\n\r\n    /**\r\n     * Processes TLE data and creates ECF datapoints \r\n     */\r\n    processTLEData(){\r\n        var split_data = this.raw_data.split(/\\r?\\n/);\r\n        const date = new Date();\r\n        var M = 5.9722*10**24;\r\n        var G = 6.674*10**(-11); \r\n        var mu = G*M;\r\n\r\n        for (var i = 0; i < (split_data.length-1)/3; i++){\r\n            var entry = 3*i;\r\n\r\n            var record = satellite.twoline2satrec(split_data[entry+1], split_data[entry+2])\r\n            var posvel_eci = satellite.propagate(record, date);\r\n            if (posvel_eci.position !== undefined){\r\n                //POINT\r\n                //calculate eci position\r\n                var pos_eci = posvel_eci.position;\r\n                var vel_eci = posvel_eci.velocity;\r\n                var vel_three_eci = new THREE.Vector3(vel_eci.x, vel_eci.z, -vel_eci.y);\r\n                var pos_three_eci = new THREE.Vector3(pos_eci.x, pos_eci.z, -pos_eci.y);\r\n                vel_three_eci.multiplyScalar(this.scale_factor);\r\n                pos_three_eci.multiplyScalar(this.scale_factor);\r\n\r\n                //calculate ecf position\r\n                var pos_ecf = satellite.eciToEcf(pos_eci, convertDate('gmst'));\r\n                var pos_three_ecf = new THREE.Vector3(pos_ecf.x, pos_ecf.z, -pos_ecf.y);\r\n                pos_three_ecf.multiplyScalar(this.scale_factor);\r\n\r\n                //plot in eci\r\n                const mesh_point = new THREE.Mesh(this.sphere_geometry,this.sphere_material.clone());\r\n                mesh_point.position.copy(pos_three_eci);\r\n                mesh_point.name = split_data[entry];\r\n                \r\n                //color mesh for debugging\r\n                //if (Math.abs(pos_three_ecf.z) < 0.05) {mesh_point.material.color = new THREE.Color(0xff0000)} //red on prime meridian\r\n                //else if (Math.abs(pos_three_eci.z) < 0.05) {mesh_point.material.color = new THREE.Color(0x00ff00)} //green on vernal equinox\r\n                //else {mesh_point.material.color = new THREE.Color(0xffffff)}\r\n\r\n                //ORBIT\r\n                //calculate orbital parameters\r\n                var points = [];\r\n                const resolution = 80;\r\n                var a = Math.cbrt(mu/(record.no/60)**2) * 10**(-3) * this.scale_factor;\r\n                var b = a*Math.sqrt(1-record.ecco**2);\r\n                var c = Math.sqrt(a**2 - b**2);\r\n\r\n                //calculate orbit\r\n                for (var j = 0; j <= resolution; j++){\r\n                    var ecc_anom = j * 2 * Math.PI/resolution;\r\n                    var point = new THREE.Vector3(a*Math.cos(ecc_anom), 0.0, -b*Math.sin(ecc_anom));                   \r\n                    points.push(point);\r\n                }\r\n                const orbit_geometry = new THREE.BufferGeometry().setFromPoints(points);\r\n                const mesh_orbit = new THREE.Line(orbit_geometry,this.line_material.clone());\r\n\r\n                mesh_orbit.rotateOnAxis(new THREE.Vector3(0,1,0), record.nodeo);\r\n                mesh_orbit.rotateOnAxis(new THREE.Vector3(1,0,0), record.inclo);\r\n                mesh_orbit.rotateOnAxis(new THREE.Vector3(0,1,0), record.argpo);\r\n\r\n                mesh_orbit.translateOnAxis(new Vector3(1,0,0),-c);\r\n\r\n                //ADD\r\n                var datapoint = new ECIDataPoint(mesh_point, mesh_orbit);\r\n                this.datapoints[split_data[entry]] =  datapoint;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders a set of data points for the dataset into the datasets scene\r\n     */\r\n    renderDataPoints(){\r\n        for (var datapoint in this.datapoints){\r\n            this.scene.add(this.datapoints[datapoint].mesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the intersects of the mouse\r\n     * @param e the event on which to trigger \r\n     * @returns an array of the objects intersected\r\n     */\r\n    updateIntersects(e){\r\n        this.raycaster.setFromCamera(updateMousePosition(e), this.camera);\r\n        return this.raycaster.intersectObjects(this.scene.children);\r\n    }\r\n\r\n    /**\r\n     * Highlights a datapoint object on hover\r\n     * @param e the event on which to trigger\r\n     */\r\n    hoverDataPoints(e){\r\n        //undo previous hover\r\n        for (var intersect of this.intersects){\r\n            var datapoint = this.datapoints[intersect];\r\n            datapoint.toggleHovered();\r\n            if (!datapoint.clicked){this.scene.remove(datapoint.mesh2)}\r\n        }\r\n        this.intersects.length = 0;\r\n        \r\n        //get mouse position and raycaster intersects\r\n        const new_intersects = this.updateIntersects(e);\r\n\r\n        //do new hover\r\n        for (var new_intersect of new_intersects){\r\n            if (new_intersect.object.name !== ''){\r\n                var new_datapoint = this.datapoints[new_intersect.object.name];\r\n                new_datapoint.toggleHovered();\r\n                this.scene.add(new_datapoint.mesh2);\r\n\r\n                this.intersects.push(new_intersect.object.name);\r\n            }\r\n        }\r\n\r\n        //change to pointer\r\n        if (this.intersects.length > 0){ \r\n            document.body.style.cursor = 'pointer';\r\n         } \r\n        else { \r\n            document.body.style.cursor = 'default' ;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Permanently highlights a datapoint object on click\r\n     * @param e the event on which to trigger\r\n     */\r\n    clickDataPoints(e){      \r\n        //get mouse position and raycaster intersects\r\n        const new_intersects = this.updateIntersects(e);\r\n\r\n        //do click\r\n        for (var new_intersect of new_intersects){\r\n            if (new_intersect.object.name !== ''){\r\n                var datapoint = this.datapoints[new_intersect.object.name];\r\n                datapoint.clicked ? this.scene.remove(datapoint.mesh2) : this.scene.add(datapoint.mesh2)\r\n                datapoint.toggleClicked();\r\n            }\r\n        }   \r\n    }\r\n\r\n    /**\r\n     * Creates all the user interactions for the dataset into the scene\r\n     */\r\n    createDataPointInteractions(){\r\n        const click = (e) => {this.clickDataPoints(e); this.hoverDataPoints(e)};\r\n        const hover = (e) => this.hoverDataPoints(e);\r\n\r\n        window.addEventListener('mousemove',hover,false); \r\n        window.addEventListener('mousedown',click,false);\r\n    }\r\n}\r\n\r\n/**\r\n * An individual ECI datapoint\r\n * @param mesh the object for the point\r\n * @param mesh2 a secondary object that is shown on click\r\n */\r\nclass ECIDataPoint{\r\n    constructor(mesh, mesh2){\r\n        this.mesh = mesh;\r\n        this.mesh2 = mesh2;\r\n\r\n        this.hovered = false;\r\n        this.clicked = false;\r\n    }\r\n\r\n    /**\r\n     * Toggles hovering state\r\n     */\r\n    toggleHovered(){\r\n        this.hovered = !this.hovered;\r\n\r\n        if (!this.clicked){\r\n            if (this.hovered){\r\n                this.mesh.material.color.set(0xff0000);\r\n                this.mesh2.material.color.set(0xff0000);\r\n            }\r\n            else {\r\n                this.mesh.material.color.set(0xffffff);\r\n                this.mesh2.material.color.set(0xffffff);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggles clicking state\r\n     */\r\n    toggleClicked(){\r\n        this.clicked = !this.clicked;\r\n\r\n        if (this.clicked){\r\n            this.mesh.material.color.set(0x00ffff);\r\n            this.mesh2.material.color.set(0x00ffff);\r\n            this.mesh.scale.set(2,2,2);\r\n        }\r\n        else {\r\n            this.mesh.scale.set(1,1,1);\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    DataSet,\r\n    ECIDataPoint\r\n}","export default __webpack_public_path__ + \"static/media/test.004e802c.txt\";","import React from 'react';\r\nimport * as THREE from 'three';\r\n\r\nimport { createScene, createEnvironment } from './graphics';\r\nimport { DataSet } from './data';\r\n\r\nimport test_dataset from './assets/datasets/test.txt';\r\n\r\nclass App extends React.Component {\r\n    /* \r\n    TODO Add API request to portfolioserver\r\n    */\r\n\r\n    componentDidMount() {\r\n        const [scene, camera, renderer] = createScene(new THREE.Vector3(0,0,3));\r\n        this.mount.appendChild(renderer.domElement);\r\n        createEnvironment(scene, camera, renderer);\r\n        \r\n        /* eslint-disable no-unused-vars */\r\n        var test;\r\n        fetch(test_dataset)\r\n        .then(r => r.text())\r\n        .then(text => test = new DataSet(\"satellite-tle\", text, 1/6378, scene, camera, renderer))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='app' ref={ref => (this.mount = ref)} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom';\r\n\r\nimport App from './App.js';\r\n\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}