{"version":3,"sources":["assets/textures/earth_2k.jpg","graphics.js","data.js","assets/datasets/test.txt","App.js","index.js"],"names":["createEnvironment","scene","camera","renderer","sun_light","THREE","position","set","add","sphere_geometry","space_material","color","side","space","scale","sun_material","sun","earth_material","map","loadTexture","earth_texture","metalness","roughness","earth","animate","requestAnimationFrame","render","image_object","load","DataSet","type","raw","scale_factor","this","raw_data","datapoints","geometry","sphere","big_sphere","processTLE","split_data","split","date","Date","i","length","entry","record","satellite","posvel","undefined","console","log","pos","x","z","y","Math","abs","push","ECIDataPoint","datapoint","id","createPoint","sphere_material","copy","App","starting_camera_pos","window","innerWidth","innerHeight","setSize","shadowMap","enabled","controls","OrbitControls","domElement","update","setupScene","mount","appendChild","fetch","test_dataset","then","r","text","test","renderDataPoints","className","ref","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e1dff682.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/earth_2k.981cc3e3.jpg\";","import * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n\r\nimport earth_texture from './assets/textures/earth_2k.jpg';\r\n\r\n/**\r\n * Sets up scene with camera, controls and renderer \r\n * @param starting_camera_pos the starting y position of the camera\r\n * @return an array containing the scene, camera, renderer, and controls in that order\r\n */\r\nfunction setupScene(starting_camera_pos){\r\n    //setup new scene\r\n    const scene = new THREE.Scene();\r\n    \r\n    //setup camera\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1);\r\n    camera.position.copy(starting_camera_pos)\r\n\r\n    //setup renderer\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n    //setup camera controls\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.update();\r\n\r\n    return [scene, camera, renderer, controls]\r\n}\r\n\r\n/**\r\n * Creates the environment i.e. lighting, sun, earth etc.\r\n * @param scene the scene into which to render\r\n * @param camera the camera used for the scene\r\n * @param renderer the renderer for the scene\r\n */\r\nfunction createEnvironment(scene, camera, renderer){\r\n    /*\r\n    6378km (1 R_e) is mapped to 1 unit,\r\n    sun positioned 80 units away rather than approx 20,000\r\n    */\r\n\r\n    //lighting\r\n    const sun_light = new THREE.PointLight(0xffffff, 1);\r\n    sun_light.position.set(80,0,0);\r\n    scene.add(sun_light);\r\n\r\n    //reusable geometry\r\n    const sphere_geometry = new THREE.SphereBufferGeometry(1,60,60);\r\n    \r\n    //space sphere\r\n    const space_material = new THREE.MeshBasicMaterial({\r\n        color: 0x000000,\r\n        side: THREE.BackSide        \r\n    });\r\n    const space = new THREE.Mesh(sphere_geometry, space_material);\r\n    space.scale.set(100,100,100);\r\n    scene.add(space);\r\n\r\n    //sun\r\n    const sun_material = new THREE.MeshBasicMaterial();\r\n    const sun = new THREE.Mesh(sphere_geometry, sun_material);\r\n    sun.scale.set(2,2,2);\r\n    sun.position.set(80,0,0);\r\n    scene.add(sun);\r\n\r\n    //earth\r\n    const earth_material = new THREE.MeshStandardMaterial({\r\n        map: loadTexture(earth_texture),\r\n        metalness: 0.4,\r\n        roughness: 0.8\r\n    }); \r\n    const earth = new THREE.Mesh(sphere_geometry, earth_material);\r\n    scene.add(earth); \r\n\r\n    //animate\r\n    function animate(){\r\n        requestAnimationFrame(animate);\r\n\r\n        render();\r\n    };\r\n\r\n    //render\r\n    function render() {\r\n        renderer.render(scene, camera);\r\n    }\r\n\r\n    animate();\r\n}\r\n\r\n/**\r\n * Loads a texture given an imported image object\r\n * @param {Image} image_object the image object\r\n * @return a texture object\r\n */\r\nfunction loadTexture(image_object){\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const texture = textureLoader.load(image_object)\r\n\r\n    return texture\r\n}\r\n\r\nexport {\r\n    setupScene,\r\n    createEnvironment,\r\n    loadTexture\r\n}","import * as THREE from 'three';\r\nimport * as satellite from 'satellite.js';\r\n\r\n/**\r\n * A Dataset\r\n * @param type the type of dataset, currently supports: satellite-tle\r\n * @param raw the raw dataset\r\n * @param scale_factor the scaling factor for display\r\n */\r\nclass DataSet{\r\n    constructor(type, raw, scale_factor){\r\n        this.raw_data = raw\r\n        this.scale_factor = scale_factor\r\n        this.datapoints = []\r\n\r\n        this.geometry = {\r\n            sphere: new THREE.SphereBufferGeometry(0.015, 4, 4),\r\n            big_sphere: new THREE.SphereBufferGeometry(0.03, 4, 4)\r\n        }\r\n\r\n        this.type = type\r\n        switch(this.type){\r\n            case 'blank':\r\n                break;\r\n            case 'satellite-tle':\r\n                this.processTLE();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes large TLE data and creates ECI datapoints \r\n     */\r\n    processTLE(){\r\n        var split_data = this.raw_data.split(/\\r?\\n/);\r\n        const date = new Date();\r\n\r\n        for (var i = 0; i < (split_data.length-1)/3; i++){\r\n            var entry = 3*i;\r\n\r\n            var record = satellite.twoline2satrec(split_data[entry+1], split_data[entry+2])\r\n            var posvel = satellite.propagate(record, date);\r\n            if (posvel.position !== undefined){\r\n                console.log(posvel);\r\n                var pos = new THREE.Vector3(this.scale_factor*posvel.position.x, this.scale_factor*posvel.position.z, this.scale_factor*posvel.position.y)\r\n                \r\n                if (Math.abs(pos.x) < 0.05){\r\n                    this.datapoints.push(new ECIDataPoint(split_data[entry], pos, this.geometry.big_sphere, new THREE.Color(0xff0000)));\r\n                }\r\n                else if (Math.abs(pos.y) < 0.05){\r\n                    this.datapoints.push(new ECIDataPoint(split_data[entry], pos, this.geometry.big_sphere, new THREE.Color(0x0000ff)));\r\n                }\r\n                else if (Math.abs(pos.z) < 0.05){\r\n                    this.datapoints.push(new ECIDataPoint(split_data[entry], pos, this.geometry.big_sphere, new THREE.Color(0x00ff00)));\r\n                }\r\n                else{\r\n                    this.datapoints.push(new ECIDataPoint(split_data[entry], pos, this.geometry.sphere, new THREE.Color(0xffffff)));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders the data points for the dataset into a scene\r\n     * @param scene the scene in which to render the datapoints\r\n     */\r\n    renderDataPoints(scene){\r\n        for (var datapoint of this.datapoints){\r\n            scene.add(datapoint.sphere)\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * An individual ECI datapoint\r\n * @param id a unique id for the point\r\n * @param position the position of the point in ECI coordinates\r\n * @param geometry the geometry object for the point\r\n * @param color the color for the point\r\n */\r\nclass ECIDataPoint{\r\n    constructor(id, position, geometry, color){\r\n        this.id = id;\r\n        this.position = position;\r\n        this.geometry = geometry;\r\n        this.color = color;\r\n\r\n        this.createPoint();\r\n    }\r\n\r\n    /**\r\n     * Creates the spherical mesh for a point\r\n     */\r\n    createPoint(){\r\n        this.sphere_material = new THREE.MeshBasicMaterial({color: this.color});\r\n        this.sphere = new THREE.Mesh(this.geometry, this.sphere_material);\r\n        this.sphere.position.copy(this.position);\r\n    }\r\n}\r\n\r\nexport {\r\n    DataSet\r\n}","export default __webpack_public_path__ + \"static/media/test.73eab6d5.txt\";","import React from 'react';\r\nimport * as THREE from 'three';\r\n\r\nimport { setupScene, createEnvironment } from './graphics.js';\r\nimport { DataSet } from './data.js';\r\n\r\nimport test_dataset from './assets/datasets/test.txt';\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        const [scene, camera, renderer,] = setupScene(new THREE.Vector3(0,0,3));\r\n        this.mount.appendChild(renderer.domElement);\r\n        createEnvironment(scene, camera, renderer);\r\n\r\n        var test;\r\n        fetch(test_dataset)\r\n        .then(r => r.text())\r\n        .then(text => test = new DataSet(\"satellite-tle\", text, 1/6378))\r\n        .then(test => test.renderDataPoints(scene))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='app' ref={ref => (this.mount = ref)} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom';\r\n\r\nimport App from './App.js';\r\n\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}